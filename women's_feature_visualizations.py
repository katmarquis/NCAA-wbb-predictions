# -*- coding: utf-8 -*-
"""Women's Feature Visualizations

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CeZv8sb5SsS81TwSyrPQickhVKC15-CS
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive

# path from your drive to data
drive.mount('/content/drive/')

path = '/content/drive/MyDrive/College/Senior_Year/SP/BEM_Ec_120/Project/data/'

sorted_data = WTourneyData = pd.read_csv(path + 'sorted_data.csv', index_col=0)
WTeams = pd.read_csv(path + 'WTeams.csv')

START_SEASON = min(sorted_data['Season'])
END_SEASON = max(sorted_data['Season'])
SEASONS = [*range(START_SEASON, END_SEASON+1)]

TEAMS = WTeams['TeamID']

def get_avg_stat(wstat, lstat):

  res = []

  for year in SEASONS:
    for team in TEAMS:
      games = list(sorted_data.loc[(sorted_data['LTeamID']==team) & (sorted_data['Season']==year)][lstat])
      wins = list(sorted_data.loc[(sorted_data['WTeamID']==team) & (sorted_data['Season']==year)][wstat])
      games.extend(wins)
      if len(games) != 0:
        val = np.mean(games)
      else:
        val = -1
      res.append([team, year, val])
      if (year == 2010 or year == 2013 or year == 2014 or year == 2015 or year == 2016) and team == 3163:
        print("UCONN " + str(year) + ": " + str(val))

      if year == 2011 and team == 3401:
        print("Texas A&M " + str(year) + ": " + str(val))

      if (year == 2012 or year == 2019) and team == 3124:
        print("Baylor " + str(year) + ": " + str(val))

      if (year == 2017 or year == 2022) and team == 3376:
        print("South Carolina " + str(year) + ": " + str(val))

      if year == 2018 and team == 3323:
        print("Notre Dame " + str(year) + ": " + str(val))

      if year == 2021 and team == 3390:
        print("Stanford " + str(year) + ": " + str(val))

      if year == 2023 and team == 3418:
        print("LSU 2023: " + str(val))

    avg_points_dict = {}
    for season in SEASONS:
      avg_points_dict[season] = []

    for team, year, avg_val in res:
      avg_points_dict[year].append(avg_val)

  return res, avg_points_dict

avg_off_efficiency_lst, avg_off_efficiency_dict = get_avg_stat('WScore', 'LScore')

plt.figure(figsize=(10, 5))
plt.title('Women\'s Average Total Points per Team per Season')
plt.xlabel('Year')
plt.ylabel('Points')
plt.xlabel('Season')
plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\
           ['2009/2010', '2010/2011', '2011/2012', '2012/2013', '2013/2014',\
            '2014/2015', '2015/2016', '2016/2017', '2017/2018', '2018/2019',\
            '2019/2020', '2020/2021', '2021/2022', '2022/2023'],
       rotation=40)

plt.ylim(40, 100)
sns.stripplot(data=pd.DataFrame.from_dict(avg_off_efficiency_dict), jitter=0.3, palette='flare')
plt.show()

avg_fgp_lst, avg_fgp_dict = get_avg_stat('WFGp', 'LFGp')

plt.figure(figsize=(10, 5))
plt.title('Average Field-goal Percentage by a Team in a Season')
plt.xlabel('Season')
plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\
           ['2009/2010', '2010/2011', '2011/2012', '2012/2013', '2013/2014',\
            '2014/2015', '2015/2016', '2016/2017', '2017/2018', '2018/2019',\
            '2019/2020', '2020/2021', '2021/2022', '2022/2023'],
       rotation=40)

plt.ylabel('Field-goal Percentage')
plt.ylim(25, 55)
sns.stripplot(data=pd.DataFrame.from_dict(avg_fgp_dict), jitter=0.3, palette='flare')
plt.show()

avg_off_efficiency_lst, avg_off_efficiency_dict = get_avg_stat('WOffEff', 'LOffEff')

plt.figure(figsize=(10, 5))
plt.title('Women\'s Average Offensive Efficiency per Team per Season')
plt.xlabel('Season')
plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\
           ['2009/2010', '2010/2011', '2011/2012', '2012/2013', '2013/2014',\
            '2014/2015', '2015/2016', '2016/2017', '2017/2018', '2018/2019',\
            '2019/2020', '2020/2021', '2021/2022', '2022/2023'],
       rotation=40)
plt.ylabel('Offensive Efficiency')
plt.ylim(60, 130)
sns.stripplot(data=pd.DataFrame.from_dict(avg_off_efficiency_dict), jitter=0.3, palette='flare')
plt.show()

avg_off_efficiency_lst, avg_off_efficiency_dict = get_avg_stat('WDefEff', 'LDefEff')

plt.figure(figsize=(10, 5))
plt.title('Women\'s Average Defensive Efficiency per Team per Season')
plt.xlabel('Season')
plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\
           ['2009/2010', '2010/2011', '2011/2012', '2012/2013', '2013/2014',\
            '2014/2015', '2015/2016', '2016/2017', '2017/2018', '2018/2019',\
            '2019/2020', '2020/2021', '2021/2022', '2022/2023'],
       rotation=40)
plt.ylabel('Defensive Efficiency')
plt.ylim(60, 120)
sns.stripplot(data=pd.DataFrame.from_dict(avg_off_efficiency_dict), jitter=0.3, palette='flare')
plt.show()